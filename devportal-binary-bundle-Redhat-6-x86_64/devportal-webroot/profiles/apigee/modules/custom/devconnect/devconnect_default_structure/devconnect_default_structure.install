<?php

/**
 * Sets block_class CSS classes for develop-with-these block
 */
function devconnect_default_structure_update_7001() {
  devconnect_default_structure_set_css_classes();
}

function devconnect_default_structure_set_css_classes() {
  if (module_exists("block_class")) {
    db_update('block')
      ->fields(array('css_class' => 'develop-with-these'))
      ->condition('module', 'devconnect_default_content')
      ->condition('delta', 'develop-with-these')
      ->execute();
    // Flush all context module cache to use the updated css_class.
    if (module_exists('context')) {
      cache_clear_all('context', 'cache', TRUE);
    }
  }
}

/**
 * Implements hook_install
 *
 * Insert the main menu and the My Apps link
 */
function devconnect_default_structure_install() {
  //Main-Menu
  $menu = array(
    'menu_name' => 'main-menu',
    'title' => 'Main menu',
    'description' => 'The <em>Main</em> menu is used on many sites to show the major sections of the site, often in a top navigation bar.',
  );
  menu_save($menu);

  // Let devconnect_blog create the blog menu link

  $menu_link_forums = array(
    'menu_name' => 'main-menu',
    'link_path' => 'forum',
    'link_title' => 'Forums',
    'weight' => 5,
    'options' => array(
      'attributes' => array(
        'title' => 'Forums',
      ),
    ),
  );
  menu_link_save($menu_link_forums);
  $menu_link_apps = array(
    'menu_name' => 'main-menu',
    'link_path' => 'user/me/apps',
    'link_title' => 'My Apps',
    'weight' => 10,
    'options' => array(
      'attributes' => array(
        'title' => 'My Apps',
      ),
    ),
  );
  menu_link_save($menu_link_apps);
  $menu_link_faq = array(
    'menu_name' => 'main-menu',
    'link_path' => 'faq-page',
    'link_title' => 'FAQs',
    'weight' => 15,
    'options' => array(
      'attributes' => array(
        'title' => 'FAQs',
      ),
    ),
  );
  menu_link_save($menu_link_faq);


  /**** Create the vocabulary ****/
  foreach (_devconnect_default_structure_taxonomy_vocabularies() as $vocabulary) {
    taxonomy_vocabulary_save((object) $vocabulary);
  }
  foreach (_devconnect_default_structure_taxonomy_terms() as $vocabulary => $terms) {
    $vid = FALSE;
    foreach (taxonomy_get_vocabularies() as $vocab) {
      if ($vocab->machine_name == $vocabulary) {
        $vid = $vocab->vid;
      }
    }
    if ($vid !== FALSE) {
      foreach ($terms as $term) {
        $term = array('vid' => $vid, 'name' => $term);
        taxonomy_term_save((object) $term);
      }
    }
  }
  /**** Create the base fields ****/
  if ($fields = _devconnect_default_structure_field_bases()) {
    field_info_cache_clear();

    // Load all the existing field bases up-front so that we don't
    // have to rebuild the cache all the time.
    $existing_fields = field_info_fields();

    foreach ($fields as $field) {
      // Create or update field.
      if (isset($existing_fields[$field['field_name']])) {
        $existing_field = $existing_fields[$field['field_name']];
        if ($field + $existing_field !== $existing_field) {
          field_update_field($field);
        }
      }
      else {
        field_create_field($field);
        $existing_fields[$field['field_name']] = $field;
      }
      variable_set('menu_rebuild_needed', TRUE);
    }
  }
  /**** Create field instances ****/
  if ($instances = _devconnect_default_structure_field_instances()) {
    field_info_cache_clear();

    // Load all the existing instances up-front so that we don't
    // have to rebuild the cache all the time.
    $existing_instances = field_info_instances();

    foreach ($instances as $field_instance) {
      // If the field base information does not exist yet, cancel out.
      if (!field_info_field($field_instance['field_name'])) {
        continue;
      }

      // Create or update field instance.
      if (isset($existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']])) {
        $existing_instance = $existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']];
        if ($field_instance + $existing_instance !== $existing_instance) {
          try {
            field_update_instance($field_instance);
          } catch (FieldException $e) {
            watchdog(__FUNCTION__, 'Attempt to update field instance %label (in %entity entity type %bundle bundle) failed: %message', array(
              '%label' => $field_instance['field_name'],
              '%entity' => $field_instance['entity_type'],
              '%bundle' => $field_instance['bundle'],
              '%message' => $e->getMessage()
            ), WATCHDOG_ERROR);
          }
        }
      }
      else {
        try {
          field_create_instance($field_instance);
        } catch (FieldException $e) {
          watchdog(__FUNCTION__, 'Attempt to create field instance %label (in %entity entity type %bundle bundle) failed: %message', array(
            '%label' => $field_instance['field_name'],
            '%entity' => $field_instance['entity_type'],
            '%bundle' => $field_instance['bundle'],
            '%message' => $e->getMessage()
          ), WATCHDOG_ERROR);
        }
        $existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']] = $field_instance;
      }
    }

    if ($instances) {
      variable_set('menu_rebuild_needed', TRUE);
    }
  }
}

/**
 * Update function to remove the devconnect_default_content module from system table
 * Also added code to create different content types tagged as blogs
 */
function devconnect_default_structure_update_7003() {

  db_delete('system')
    ->condition('type', 'module')
    ->condition('name', 'devconnect_default_content')
    ->execute();
  //Blog Content Creation Menu
  $menu = array(
    'menu_name' => 'blog-content-creation-menu',
    'title' => 'Blog Content Creation Menu',
    'description' => 'Blog Content Creation Menu',
  );
  menu_save($menu);
  $menu_link = array(
    'menu_name' => 'blog-content-creation-menu',
    'link_path' => module_exists('blog') ? 'node/add/blog' : 'node/add/article',
    'link_title' => 'Create Blog',
    'weight' => 0,
    'options' => array(
      'attributes' => array(
        'title' => 'Create Blog',
      ),
    ),
  );
  menu_link_save($menu_link);
  // Create the base fields
  drupal_load('module', 'devconnect_default_structure');
  if ($fields = _devconnect_default_structure_field_bases()) {
    field_info_cache_clear();

    // Load all the existing field bases up-front so that we don't
    // have to rebuild the cache all the time.
    $existing_fields = field_info_fields();

    if ($field = $fields['field_content_tag']) {
      // Create or update field.
      if (isset($existing_fields[$field['field_name']])) {
        $existing_field = $existing_fields[$field['field_name']];
        if ($field + $existing_field !== $existing_field) {
          field_update_field($field);
        }
      }
      else {
        field_create_field($field);
        $existing_fields[$field['field_name']] = $field;
      }
      variable_set('menu_rebuild_needed', TRUE);
    }
  }
  /**** Create field instances ****/
  if ($instances = _devconnect_default_structure_field_instances()) {
    field_info_cache_clear();

    // Load all the existing instances up-front so that we don't
    // have to rebuild the cache all the time.
    $existing_instances = field_info_instances();

    foreach ($instances as $field_instance) {
      // If the field base information does not exist yet, cancel out.
      if (!field_info_field($field_instance['field_name'])) {
        continue;
      }
      if ($field_instance['bundle'] == 'blog' && !module_exists('blog')) {
        continue;
      }
      // Create or update field instance.
      if (!isset($existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']])) {
        try {
          field_create_instance($field_instance);
        } catch (FieldException $e) {
          watchdog(__FUNCTION__, 'Attempt to create field instance %label (in %entity entity type %bundle bundle) failed: %message', array(
            '%label' => $field_instance['field_name'],
            '%entity' => $field_instance['entity_type'],
            '%bundle' => $field_instance['bundle'],
            '%message' => $e->getMessage()
          ), WATCHDOG_ERROR);
        }
        $existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']] = $field_instance;
      }
    }

    if ($instances) {
      variable_set('menu_rebuild_needed', TRUE);
    }
  }
}

/**
 * Tag blog content so that it can show up on the front page blocks
 */
function devconnect_default_structure_update_7004() {
  $query = new EntityFieldQuery();
  $nodes = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'blog')
    ->execute();
  foreach ($nodes['node'] as $obj) {
    $node = node_load($obj->nid);
    foreach (taxonomy_get_term_by_name('blog', 'content_type_tag') as $obj) {
      $node->field_content_tag[$node->language][]['tid'] = $obj->tid;
    }
    node_save($node);
  }
}

/**
 * Upgrade CKEditor to 4.3.2 and add additional plugins
 */
function devconnect_default_structure_update_7005() {
  $ckeditor_settings = array(
    'ss' => 2,
    'default' => 't',
    'show_toggle' => 't',
    'uicolor' => 'default',
    'uicolor_user' => 'default',
    'toolbar' => "
    [['Source'],
    ['Cut','Copy','Paste','PasteText','PasteFromWord','-','SpellChecker','Scayt'],
    ['Undo','Redo','Find','Replace','-','SelectAll','RemoveFormat'],
    ['Media','Table','HorizontalRule','Smiley','SpecialChar','Iframe'],
    '/',
    ['Bold','Italic','Underline','Strike','-','Subscript','Superscript'],
    ['NumberedList','BulletedList','-','Outdent','Indent','Blockquote','CreateDiv'],
    ['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock','-','BidiLtr','BidiRtl'],
    ['Link','Unlink','Anchor'],
    ['DrupalBreak'],
    '/',
    ['Format','Font','FontSize'],
    ['TextColor','BGColor'],
    ['Maximize','ShowBlocks']]",
    'expand' => "t",
    'width' => '100%',
    'lang' => 'en',
    'auto_lang' => 't',
    'language_direction' => 'default',
    'enter_mode' => 'p',
    'shift_enter_mode' => 'br',
    'font_format' => 'p;div;pre;address;h1;h2;h3;h4;h5;h6',
    'custom_formatting' => 'f',
    'formatting' => array(
      'custom_formatting_options' => array(
        'indent' => 'indent',
        'breakBeforeOpen' => 'breakBeforeOpen',
        'breakAfterOpen' => 'breakAfterOpen',
        'breakAfterClose' => 'breakAfterClose',
        'breakBeforeClose' => '0',
        'pre_indent' => '0',
      ),
    ),
    'css_mode' => 'self',
    'css_path' => '%t/css/editor.css',
    'css_style' => 'theme',
    'styles_path' => '',
    'filebrowser' => 'none',
    'filebrowser_image' => '',
    'filebrowser_flash' => '',
    'UserFilesPath' => '%b%f/',
    'UserFilesAbsolutePath' => '%d%b%f/',
    'forcePasteAsPlainText' => 'f',
    'html_entities' => 't',
    'scayt_autoStartup' => 'f',
    'theme_config_js' => 'f',
    'js_conf' => 'config.allowedContent = true;',
    'loadPlugins' => array(
      'a11yhelp' => array(
        'name' => 'a11yhelp',
        'desc' => 'Plugin file: a11yhelp',
        'path' => '%plugin_dir_extra%a11yhelp/',
        'buttons' => '',
        'default' => 'f',
      ),
      'about' => array(
        'name' => 'about',
        'desc' => 'Plugin file: about',
        'path' => '%plugin_dir_extra%about/',
        'buttons' => '',
        'default' => 'f',
      ),
      'basicstyles' => array(
        'name' => 'basicstyles',
        'desc' => 'Plugin file: basicstyles',
        'path' => '%plugin_dir_extra%basicstyles/',
        'buttons' => '',
        'default' => 'f',
      ),
      'blockquote' => array(
        'name' => 'blockquote',
        'desc' => 'Plugin file: blockquote',
        'path' => '%plugin_dir_extra%blockquote/',
        'buttons' => '',
        'default' => 'f',
      ),
      'button' => array(
        'name' => 'button',
        'desc' => 'Plugin file: button',
        'path' => '%plugin_dir_extra%button/',
        'buttons' => '',
        'default' => 'f',
      ),
      'ckeditor_link' => array(
        'name' => 'drupal_path',
        'desc' => 'CKEditor Link - A plugin to easily create links to Drupal internal paths',
        'path' => '%base_path%profiles/apigee/modules/contrib/ckeditor_link/plugins/link/',
        'buttons' => '',
      ),
      'clipboard' => array(
        'name' => 'clipboard',
        'desc' => 'Plugin file: clipboard',
        'path' => '%plugin_dir_extra%clipboard/',
        'buttons' => '',
        'default' => 'f',
      ),
      'contextmenu' => array(
        'name' => 'contextmenu',
        'desc' => 'Plugin file: contextmenu',
        'path' => '%plugin_dir_extra%contextmenu/',
        'buttons' => '',
        'default' => 'f',
      ),
      'counter' => array(
        'name' => 'contextmenu',
        'desc' => 'Plugin file: counter',
        'path' => '%plugin_dir_extra%counter/',
        'buttons' => '',
        'default' => 'f',
      ),
      'dialog' => array(
        'name' => 'dialog',
        'desc' => 'Plugin file: dialog',
        'path' => '%plugin_dir_extra%dialog/',
        'buttons' => '',
        'default' => 'f',
      ),
      'dialogui' => array(
        'name' => 'dialog',
        'desc' => 'Plugin file: dialogui',
        'path' => '%plugin_dir_extra%dialogui/',
        'buttons' => '',
        'default' => 'f',
      ),
      'drupalbreaks' => array(
        'name' => 'drupalbreaks',
        'desc' => 'Plugin for inserting Drupal teaser and page breaks.',
        'path' => '%plugin_dir%drupalbreaks/',
        'buttons' => array(
          'DrupalBreak' => array(
            'label' => 'DrupalBreak',
            'icon' => 'images/drupalbreak.png',
          ),
        ),
        'default' => 't',
      ),
      'elementspath' => array(
        'name' => 'elementspath',
        'desc' => 'Plugin file: elementspath',
        'path' => '%plugin_dir_extra%elementspath/',
        'buttons' => '',
        'default' => 'f',
      ),
      'enterkey' => array(
        'name' => 'enterkey',
        'desc' => 'Plugin file: enterkey',
        'path' => '%plugin_dir_extra%enterkey/',
        'buttons' => '',
        'default' => 'f',
      ),
      'entities' => array(
        'name' => 'entities',
        'desc' => 'Plugin file: entities',
        'path' => '%plugin_dir_extra%entities/',
        'buttons' => '',
        'default' => 'f',
      ),
      'fakeobjects' => array(
        'name' => 'fakeobjects',
        'desc' => 'Plugin file: fakeobjects',
        'path' => '%plugin_dir_extra%fakeobjects/',
        'buttons' => '',
        'default' => 'f',
      ),
      'filebrowser' => array(
        'name' => 'filebrowser',
        'desc' => 'Plugin file: filebrowser',
        'path' => '%plugin_dir_extra%filebrowser/',
        'buttons' => '',
        'default' => 'f',
      ),
      'floatingspace' => array(
        'name' => 'floatingspace',
        'desc' => 'Plugin file: floatingspace',
        'path' => '%plugin_dir_extra%floatingspace/',
        'buttons' => '',
        'default' => 'f',
      ),
      'floatpanel' => array(
        'name' => 'floatpanel',
        'desc' => 'Plugin file: floatpanel',
        'path' => '%plugin_dir_extra%floatpanel/',
        'buttons' => '',
        'default' => 'f',
      ),
      'horizontalrule' => array(
        'name' => 'horizontalrule',
        'desc' => 'Plugin file: horizontalrule',
        'path' => '%plugin_dir_extra%horizontalrule/',
        'buttons' => '',
        'default' => 'f',
      ),
      'htmlwriter' => array(
        'name' => 'htmlwriter',
        'desc' => 'Plugin file: htmlwriter',
        'path' => '%plugin_dir_extra%htmlwriter/',
        'buttons' => '',
        'default' => 'f',
      ),
      'iframe' => array(
        'name' => 'iframe',
        'desc' => 'Plugin file: iframe',
        'path' => '%plugin_dir_extra%iframe/',
        'buttons' => '',
        'default' => 'f',
      ),
      'image' => array(
        'name' => 'image',
        'desc' => 'Plugin file: image',
        'path' => '%plugin_dir_extra%image/',
        'buttons' => '',
        'default' => 'f',
      ),
      'indent' => array(
        'name' => 'indent',
        'desc' => 'Plugin file: indent',
        'path' => '%plugin_dir_extra%indent/',
        'buttons' => '',
        'default' => 'f',
      ),
      'indentlist' => array(
        'name' => 'indentlist',
        'desc' => 'Plugin file: indentlist',
        'path' => '%plugin_dir_extra%indentlist/',
        'buttons' => '',
        'default' => 'f',
      ),
      'lineutils' => array(
        'name' => 'lineutils',
        'desc' => 'Plugin file: lineutils',
        'path' => '%plugin_dir_extra%lineutils/',
        'buttons' => '',
        'default' => 'f',
      ),
      'list' => array(
        'name' => 'list',
        'desc' => 'Plugin file: list',
        'path' => '%plugin_dir_extra%list/',
        'buttons' => '',
        'default' => 'f',
      ),
      'magicline' => array(
        'name' => 'magicline',
        'desc' => 'Plugin file: magicline',
        'path' => '%plugin_dir_extra%magicline/',
        'buttons' => '',
        'default' => 'f',
      ),
      'media' => array(
        'name' => 'media',
        'desc' => 'Plugin for inserting images from Drupal media module',
        'path' => '%plugin_dir%media/',
        'buttons' => array(
          'Media' => array(
            'label' => 'Media',
            'icon' => 'images/icon.gif',
          ),
        ),
        'default' => 'f',
      ),
      'mediaembed' => array(
        'name' => 'mediaembed',
        'desc' => 'Plugin for inserting Drupal embeded media',
        'path' => '%plugin_dir%mediaembed/',
        'buttons' => array(
          'MediaEmbed' => array(
            'label' => 'MediaEmbed',
            'icon' => 'images/icon.png',
          )
        ),
        'default' => 'f',
      ),
      'menu' => array(
        'name' => 'menu',
        'desc' => 'Plugin file: menu',
        'path' => '%plugin_dir_extra%menu/',
        'buttons' => '',
        'default' => 'f',
      ),
      'menubutton' => array(
        'name' => 'menubutton',
        'desc' => 'Plugin file: menubutton',
        'path' => '%plugin_dir_extra%menubutton/',
        'buttons' => '',
        'default' => 'f',
      ),
      'panel' => array(
        'name' => 'panel',
        'desc' => 'Plugin file: panel',
        'path' => '%plugin_dir_extra%panel/',
        'buttons' => '',
        'default' => 'f',
      ),
      'pastefromword' => array(
        'name' => 'pastefromword',
        'desc' => 'Plugin file: pastefromword',
        'path' => '%plugin_dir_extra%pastefromword/',
        'buttons' => '',
        'default' => 'f',
      ),
      'pastetext' => array(
        'name' => 'pastetext',
        'desc' => 'Plugin file: pastetext',
        'path' => '%plugin_dir_extra%pastetext/',
        'buttons' => '',
        'default' => 'f',
      ),
      'popup' => array(
        'name' => 'popup',
        'desc' => 'Plugin file: popup',
        'path' => '%plugin_dir_extra%popup/',
        'buttons' => '',
        'default' => 'f',
      ),
      'removeformat' => array(
        'name' => 'removeformat',
        'desc' => 'Plugin file: removeformat',
        'path' => '%plugin_dir_extra%removeformat/',
        'buttons' => '',
        'default' => 'f',
      ),
      'richcombo' => array(
        'name' => 'richcombo',
        'desc' => 'Plugin file: richcombo',
        'path' => '%plugin_dir_extra%richcombo/',
        'buttons' => '',
        'default' => 'f',
      ),
      'scayt' => array(
        'name' => 'scayt',
        'desc' => 'Plugin file: scayt',
        'path' => '%plugin_dir_extra%scayt/',
        'buttons' => '',
        'default' => 'f',
      ),
      'sharedspace' => array(
        'name' => 'sharedspace',
        'desc' => 'Plugin file: sharedspace',
        'path' => '%plugin_dir_extra%sharedspace/',
        'buttons' => '',
        'default' => 'f',
      ),
      'sourcearea' => array(
        'name' => 'sourcearea',
        'desc' => 'Plugin file: sourcearea',
        'path' => '%plugin_dir_extra%sourcearea/',
        'buttons' => '',
        'default' => 'f',
      ),
      'sourcedialog' => array(
        'name' => 'sourcedialog',
        'desc' => 'Plugin file: sourcedialog',
        'path' => '%plugin_dir_extra%sourcedialog/',
        'buttons' => '',
        'default' => 'f',
      ),
      'specialchar' => array(
        'name' => 'specialchar',
        'desc' => 'Plugin file: specialchar',
        'path' => '%plugin_dir_extra%specialchar/',
        'buttons' => '',
        'default' => 'f',
      ),
      'stylescombo' => array(
        'name' => 'stylescombo',
        'desc' => 'Plugin file: stylescombo',
        'path' => '%plugin_dir_extra%stylescombo/',
        'buttons' => '',
        'default' => 'f',
      ),
      'tab' => array(
        'name' => 'tab',
        'desc' => 'Plugin file: tab',
        'path' => '%plugin_dir_extra%tab/',
        'buttons' => '',
        'default' => 'f',
      ),
      'tableresize' => array(
        'name' => 'tableresize',
        'desc' => 'Plugin file: tableresize',
        'path' => '%plugin_dir_extra%tableresize/',
        'buttons' => '',
        'default' => 't',
      ),
      'toolbarswitch' => array(
        'name' => 'toolbarswitch',
        'desc' => 'Plugin file: toolbarswitch',
        'path' => '%plugin_dir_extra%toolbarswitch/',
        'buttons' => '',
        'default' => 't',
      ),
      'widget' => array(
        'name' => 'widget',
        'desc' => 'Plugin file: widget',
        'path' => '%plugin_dir_extra%widget/',
        'buttons' => '',
        'default' => 't',
      ),
      'wysiwygarea' => array(
        'name' => 'wysiwygarea',
        'desc' => 'Plugin file: wysiwygarea',
        'path' => '%plugin_dir_extra%wysiwygarea/',
        'buttons' => '',
        'default' => 't',
      ),
    ),
  );

  $ckeditor_global_settings = array(
    'skin' => 'apigee',
    'ckeditor_path' => '%l/ckeditor',
    'ckeditor_local_path' => '',
    'ckeditor_plugins_path' => '%l/ckeditor/plugins',
    'ckeditor_plugins_local_path' => '',
    'ckfinder_path' => '%m/ckfinder',
    'ckfinder_local_path' => '',
    'ckeditor_aggregate' => 't',
    'toolbar_wizard' => 't',
    'loadPlugins' => array(),
  );

  db_delete('ckeditor_settings')
    ->condition('name', 'full')
    ->execute();
  db_delete('ckeditor_settings')
    ->condition('name', 'CKEditor Global Profile')
    ->execute();
  db_insert('ckeditor_settings')
    ->fields(array(
      "name" => 'full',
      "settings" => serialize($ckeditor_settings),
    ))
    ->execute();
  db_insert('ckeditor_settings')
    ->fields(array(
      "name" => 'CKEditor Global Profile',
      "settings" => serialize($ckeditor_global_settings),
    ))
    ->execute();

  db_delete('ckeditor_input_format')
    ->condition('name', 'full')
    ->execute();
  db_insert('ckeditor_input_format')->fields(array("name" => 'full', "format" => 'filtered_html'))->execute();
  db_insert('ckeditor_input_format')->fields(array("name" => 'full', "format" => 'full_html'))->execute();
}

/**
 * Disable apigee_sso_ui if apigee_account and apigee_sso are disabled.
 */
function devconnect_default_structure_update_7425() {
  if (!module_exists('apigee_account') && !module_exists('apigee_sso') && module_exists('apigee_sso_ui')) {
    module_disable(array('apigee_sso_ui'));
    drupal_uninstall_modules(array('apigee_account', 'apigee_sso', 'apigee_sso_ui'));
  }
}