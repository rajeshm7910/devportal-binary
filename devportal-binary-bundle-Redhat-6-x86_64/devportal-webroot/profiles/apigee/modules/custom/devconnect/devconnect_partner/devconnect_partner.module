<?php

function devconnect_partner_menu() {

  // Settings callback.
  $items['user/%user/partner'] = array(
    'title callback' => 'devconnect_partner_title_callback',
    'title arguments' => array('@partner Partner Configuration', 1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_partner_profile_form', 1),
    'access arguments' => array('administer partnership', 1),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'devconnect_partner.profile.inc',
  );
  $items['user/%user/partner/config'] = array(
    'title callback' => 'devconnect_partner_title_callback',
    'title arguments' => array('@partner Partner Configuration', 1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_partner_profile_form', 1),
    'access arguments' => array('administer partnership', 1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'devconnect_partner.profile.inc',
  );
  $items['user/%user/partner/developers'] = array(
    'title callback' => 'devconnect_partner_title_callback',
    'title arguments' => array('@partner Partner Developers', 1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_partner_developers_list_form', 1),
    'access callback' => 'devconnect_partner_check_permission',
    'access arguments' => array('admin', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'devconnect_partner.developers.inc'
  );
  $items['user/%user/partner/developers/add'] = array(
    'title' => 'Add a Developer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_partner_add_developer_form', 1),
    'access callback' => 'devconnect_partner_check_permission',
    'access arguments' => array('admin', 1),
    'type' => MENU_CALLBACK,
    'file' => 'devconnect_partner.developers.inc'
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * @param array $items
 */
function devconnect_partner_menu_alter(array &$items) {
  $my_path = drupal_get_path('module', 'devconnect_partner');

  $default_title = $items['user/%user/apps']['title'];
  unset($items['user/%user/apps']['title']);
  $items['user/%user/apps'] = array_merge($items['user/%user/apps'], array(
    'page callback' => 'devconnect_partner_apps_getlist',
    'page arguments' => array(1),
    'title callback' => 'devconnect_partner_title_callback',
    'title arguments' => array('@partnerâ€™s Apps', 1, $default_title),
    'file' => 'devconnect_partner.apps.inc',
    'access callback' => 'devconnect_partner_check_permission',
    'access arguments' => array('view', 1),
    'file path' => $my_path
  ));

  $items['user/%user/app-detail/%'] = array_merge($items['user/%user/app-detail/%'], array(
    'page callback' => 'devconnect_partner_apps_detail',
    'page arguments' => array(1, 3),
    'file' => 'devconnect_partner.apps.inc',
    'access callback' => 'devconnect_partner_check_permission',
    'access arguments' => array('view', 1),
    'file path' => $my_path
  ));
  $items['user/%user/apps/add'] = array_merge($items['user/%user/apps/add'], array(
    'page callback' => 'devconnect_partner_apps_edit_form',
    'page arguments' => array(1),
    'file' => 'devconnect_partner.apps.inc',
    'access callback' => 'devconnect_partner_check_permission',
    'access arguments' => array('create', 1),
    'file path' => $my_path
  ));
  $items['user/%user/apps/%/edit-app'] = array_merge($items['user/%user/apps/%/edit-app'], array(
    'page callback' => 'devconnect_partner_apps_edit_form',
    'page arguments' => array(1, 3),
    'file' => 'devconnect_partner.apps.inc',
    'access callback' => 'devconnect_partner_check_permission',
    'access arguments' => array('edit', 1),
    'file path' => $my_path
  ));
  $items['user/%user/apps/%/delete'] = array_merge($items['user/%user/apps/%/delete'], array(
    'page callback' => 'devconnect_partner_app_delete_form',
    'page arguments' => array(1, 3),
    'file' => 'devconnect_partner.apps.inc',
    'access callback' => 'devconnect_partner_check_permission',
    'access arguments' => array('remove', 1),
    'file path' => $my_path
  ));
  $items['user/%user/app-performance/%/%'] = array_merge($items['user/%user/app-performance/%/%'], array(
    'page callback' => 'devconnect_partner_analytics_performance_download',
    'page arguments' => array(1, 3, 4),
    'file' => 'devconnect_partner.apps.inc',
    'file path' => $my_path
  ));

}

function devconnect_partner_title_callback($pattern, $user = NULL, $app_name = NULL, $default_title = FALSE) {
  $args = array();
  if ($user) {
    $partner = _devconnect_partner_get_partner_entity($user->uid);
    if ($user->uid == $partner->uid && !array_key_exists('partner_name', $partner->attributes)) {
      // Fall back to title defined in hook_menu's "title"; that is to say,
      // ignore title callback, because this isn't a partner app.
      return $default_title;
    }
    $args['@partner'] = $partner->attributes['partner_name'];
  }
  if (!empty($app_name)) {
    $args['@app_name'] = $app_name;
  }
  return t($pattern, $args);
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function devconnect_partner_permission() {
  $perm['administer partnership'] = array(
    'title' => t('Administer partnership'),
    'description' => t('Allows user to create/edit a Partnership.')
  );
  return $perm;
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function devconnect_partner_theme() {
  $theme['devconnect_partner_developers_list_form'] = array('render element' => 'form');

  return $theme;
}


/**
 * Fetches the Drupal uid of the partner with whom a developer is affiliated.
 * If the user is not affiliated with any partner, the user's own uid is
 * returned.
 *
 * Static caching is performed for improved performance.
 *
 * @param int $uid
 * @return int
 */
function _devconnect_partner_get_partner_uid($uid) {
  static $partner_ids = array();

  if (!array_key_exists($uid, $partner_ids)) {
    $partner_id = _devconnect_partner_query_partner_uid_attribute($uid);
    $partner_ids[$uid] = ($partner_id ?: $uid);
  }
  return $partner_ids[$uid];
}

/**
 * Fetches the partner_id associated with a user. If no partner_id is set,
 * returns FALSE.
 *
 * @param int $uid
 * @return int|bool
 */
function _devconnect_partner_query_partner_uid_attribute($uid) {
  $query = db_select('dc_dev', 'd');
  $query->innerJoin('dc_dev_attributes', 'a', 'd.developer_id = a.developer_id AND a.name=:name', array(':name' => 'partner_id'));
  $query->innerJoin('dc_dev', 'd2', 'a.value = d2.developer_id');
  $partner_id = $query->fields('d2', array('uid'))
    ->condition('d.uid', $uid)
    ->execute()
    ->fetchField();
  return $partner_id;
}

/**
 * Loads the Developer entity of a partner based on the affiliated user's UID.
 *
 * @param int $uid
 * @return Drupal\devconnect_user\DeveloperEntity|bool
 */
function _devconnect_partner_get_partner_entity($uid) {
  $uid = _devconnect_partner_get_partner_uid($uid);
  $mail = db_select('users', 'u')->fields('u', array('mail'))->condition('uid', $uid)->execute()->fetchField();
  return entity_load_single('developer', $mail);
}

/**
 * Determines whether a user has a given partner-specific permission.
 *
 * @param string $permission
 * @param stdClass $user
 * @return bool
 */
function devconnect_partner_check_permission($permission, $user) {
  static $user_perms = array();
  if (!array_key_exists($user->uid, $user_perms)) {
    $query = db_select('dc_dev', 'd');
    $query->innerJoin('dc_dev_attributes', 'a', 'd.developer_id = a.developer_id');
    $perms = $query->fields('a', array('value'))
      ->condition('d.uid', $user->uid)
      ->condition('a.name', 'partner_perms')
      ->execute()
      ->fetchField();
    $user_perms[$user->uid] = explode(',', $perms);
  }
  return in_array($permission, $user_perms[$user->uid]);
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Adds a tabbed link to Partnership where appropriate
 *
 * @param array $data
 * @param $router_item
 * @param $root_path
 */
function devconnect_partner_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (arg(0) == 'user' && arg(2) != 'partner') {
    $uid = arg(1);
    if ($uid === 'me' || $uid == $GLOBALS['user']->uid) {
      $user = $GLOBALS['user'];
    }
    else {
      $user = entity_load_single('user', $uid);
    }
    if ($user && user_access('administer partnership', $user)) {
      $menu_item = menu_get_item('user/%/partner');
      if ($menu_item) {
        $menu_item['href'] = 'user/' . $uid . '/partner';
        $menu_item['tab_parent'] = $menu_item['tab_root'] = 'user/%';
        $menu_item['tab_root_href'] = $menu_item['tab_parent_href'] = 'user/' . $uid;
        $menu_item['localized_options'] = array();
        unset($menu_item['title_callback']);
        unset($menu_item['title_arguments']);
        $menu_item['title'] = t('Partnership');

        $data['tabs'][0]['count']++;
        $data['tabs'][0]['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => $menu_item
        );

      }
    }
  }
}
